{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":27,"width":1918,"height":1009,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/home/david/programming/cuda/red_eye","/home/david/programming/cuda/blur_image"],"buffers":[{"text":"//Udacity HW 4\n//Radix Sorting\n\n#include \"utils.h\"\n#include <thrust/host_vector.h>\n\n/* Red Eye Removal\n   ===============\n\n   For this assignment we are implementing red eye removal.  This is\n   accomplished by first creating a score for every pixel that tells us how\n   likely it is to be a red eye pixel.  We have already done this for you - you\n   are receiving the scores and need to sort them in ascending order so that we\n   know which pixels to alter to remove the red eye.\n\n   Note: ascending order == smallest to largest\n\n   Each score is associated with a position, when you sort the scores, you must\n   also move the positions accordingly.\n\n   Implementing Parallel Radix Sort with CUDA\n   ==========================================\n\n   The basic idea is to construct a histogram on each pass of how many of each\n   \"digit\" there are.   Then we scan this histogram so that we know where to put\n   the output of each digit.  For example, the first 1 must come after all the\n   0s so we have to know how many 0s there are to be able to start moving 1s\n   into the correct position.\n\n   1) Histogram of the number of occurrences of each digit\n   2) Exclusive Prefix Sum of Histogram\n   3) Determine relative offset of each digit\n        For example [0 0 1 1 0 0 1]\n                ->  [0 1 0 1 2 3 2]\n   4) Combine the results of steps 2 & 3 to determine the final\n      output location for each element and move it there\n\n   LSB Radix sort is an out-of-place sort and you will need to ping-pong values\n   between the input and output buffers we have provided.  Make sure the final\n   sorted results end up in the output buffer!  Hint: You may need to do a copy\n   at the end.\n\n */\n\n\nvoid your_sort(unsigned int* const d_inputVals,\n               unsigned int* const d_inputPos,\n               unsigned int* const d_outputVals,\n               unsigned int* const d_outputPos,\n               const size_t numElems)\n{\n  //TODO\n  //PUT YOUR SORT HERE\n  printf(\"%d\", numElems);\n}\n","markerStore":{"nextMarkerId":116,"markersById":{"0":{"range":{"start":{"row":53,"column":24},"end":{"row":53,"column":24}},"properties":{"type":"selection","editorId":26,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"114":{"range":{"start":{"row":53,"column":23},"end":{"row":53,"column":24}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false},"115":{"range":{"start":{"row":53,"column":8},"end":{"row":53,"column":9}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false}},"version":2},"history":{"version":3,"nextCheckpointId":67,"undoStack":[{"type":"checkpoint","id":22,"snapshot":{"0":{"range":[[52,0],[52,0]],"properties":{"type":"selection","editorId":26,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[52,0],[52,0]],"properties":{"type":"selection","editorId":26,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[52,22],[52,22]],"newRange":[[52,22],[53,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[53,0],[53,0]],"newRange":[[53,0],[53,2]],"oldText":"","newText":"  "}},{"type":"change","content":{"oldRange":[[53,2],[53,2]],"newRange":[[53,2],[53,3]],"oldText":"","newText":"p"}},{"type":"change","content":{"oldRange":[[53,3],[53,3]],"newRange":[[53,3],[53,4]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[53,4],[53,4]],"newRange":[[53,4],[53,5]],"oldText":"","newText":"i"}},{"type":"change","content":{"oldRange":[[53,5],[53,5]],"newRange":[[53,5],[53,6]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[53,6],[53,6]],"newRange":[[53,6],[53,7]],"oldText":"","newText":"t"}},{"type":"change","content":{"oldRange":[[53,7],[53,7]],"newRange":[[53,7],[53,8]],"oldText":"","newText":"f"}},{"type":"change","content":{"oldRange":[[53,8],[53,8]],"newRange":[[53,8],[53,10]],"oldText":"","newText":"()"}},{"type":"change","content":{"oldRange":[[53,9],[53,9]],"newRange":[[53,9],[53,11]],"oldText":"","newText":"\"\""}},{"type":"change","content":{"oldRange":[[53,10],[53,10]],"newRange":[[53,10],[53,11]],"oldText":"","newText":"T"}},{"type":"change","content":{"oldRange":[[53,11],[53,11]],"newRange":[[53,11],[53,12]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[53,11],[53,12]],"newRange":[[53,11],[53,11]],"oldText":"d","newText":""}},{"type":"change","content":{"oldRange":[[53,10],[53,11]],"newRange":[[53,10],[53,10]],"oldText":"T","newText":""}},{"type":"change","content":{"oldRange":[[53,10],[53,10]],"newRange":[[53,10],[53,11]],"oldText":"","newText":"%"}},{"type":"change","content":{"oldRange":[[53,11],[53,11]],"newRange":[[53,11],[53,12]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[53,13],[53,13]],"newRange":[[53,13],[53,14]],"oldText":"","newText":","}},{"type":"change","content":{"oldRange":[[53,14],[53,14]],"newRange":[[53,14],[53,15]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[53,15],[53,15]],"newRange":[[53,15],[53,16]],"oldText":"","newText":"n"}},{"type":"change","content":{"oldRange":[[53,16],[53,16]],"newRange":[[53,16],[53,17]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[53,17],[53,17]],"newRange":[[53,17],[53,18]],"oldText":"","newText":"m"}},{"type":"change","content":{"oldRange":[[53,18],[53,18]],"newRange":[[53,18],[53,19]],"oldText":"","newText":"E"}},{"type":"change","content":{"oldRange":[[53,19],[53,19]],"newRange":[[53,19],[53,20]],"oldText":"","newText":"l"}},{"type":"change","content":{"oldRange":[[53,20],[53,20]],"newRange":[[53,20],[53,24]],"oldText":"","newText":"    "}},{"type":"change","content":{"oldRange":[[53,23],[53,24]],"newRange":[[53,23],[53,23]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[53,22],[53,23]],"newRange":[[53,22],[53,22]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[53,21],[53,22]],"newRange":[[53,21],[53,21]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[53,20],[53,21]],"newRange":[[53,20],[53,20]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[53,20],[53,20]],"newRange":[[53,20],[53,21]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[53,21],[53,21]],"newRange":[[53,21],[53,22]],"oldText":"","newText":"m"}},{"type":"change","content":{"oldRange":[[53,22],[53,22]],"newRange":[[53,22],[53,23]],"oldText":"","newText":"s"}},{"type":"change","content":{"oldRange":[[53,24],[53,24]],"newRange":[[53,24],[53,25]],"oldText":"","newText":";"}},{"type":"group-end","snapshot":{"0":{"range":[[53,25],[53,25]],"properties":{"type":"selection","editorId":26,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[53,24],[53,24]],"properties":{"type":"selection","editorId":26,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[50,1],[50,2]],"newRange":[[50,1],[50,1]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[8,0],[8,3]],"newRange":[[8,0],[8,0]],"oldText":"   ","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[53,24],[53,24]],"properties":{"type":"selection","editorId":26,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":36,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/mnt/David/programming/cuda/red_eye/student_func.cu","digestWhenLastPersisted":"c386d967d24bf00c694fa5620b2c17a00ef240de","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"#include \"utils.h\"\n\n__global__\nvoid gaussian_blur(const unsigned char* const inputChannel,\n                   unsigned char* const outputChannel,\n                   int numRows, int numCols,\n                   const float* const filter, const int filterWidth)\n{\n    // get thread index\n    int x_idx = blockDim.x * blockIdx.x + threadIdx.x;\n    int y_idx = blockDim.y * blockIdx.y + threadIdx.y;\n    int thread_idx = numCols * y_idx + x_idx;\n\n    if ((x_idx < numCols) && (y_idx < numRows)) {\n    \t// get thread location in relation to the filter\n    \t// this will always give center of filter array width, since filterWidth must be odd to have center pixel\n    \tint center = (filterWidth - 1) / 2;\n\n    \tint x, y, idx, filter_idx;\n    \tfloat total = 0;\n    \tfor (int i = 0; i < filterWidth; i++){\n    \t    for (int j = 0; j < filterWidth; j++){\n        \t\tx = x_idx + j - center; // x value of surrounding pixel\n        \t\ty = y_idx + i - center; // same for y value\n                if (x < 0){ x = 0; } // clamping values outside image boundaries\n                if (y < 0){ y = 0; }\n                if (x >= numCols){ x = numCols - 1; }\n                if (y >= numRows){ y = numRows -1; }\n        \t\tidx = numCols * y + x; // 1D index for surrounding pixel\n        \t\tfilter_idx = filterWidth * i + j; // 1D index of weight value in filter\n                float imageColor = inputChannel[idx];\n                float filterColor = filter[filter_idx];\n        \t\ttotal += imageColor * filterColor;\n    \t    }\n    \t}\n    \toutputChannel[thread_idx] = total;\n    }\n\n}\n\n//This kernel takes in an image represented as a uchar4 and splits\n//it into three images consisting of only one color channel each\n__global__\nvoid separateChannels(const uchar4* const inputImageRGBA,\n                      int numRows,\n                      int numCols,\n                      unsigned char* const redChannel,\n                      unsigned char* const greenChannel,\n                      unsigned char* const blueChannel)\n{\n    // get thread index\n    int x_idx = blockDim.x * blockIdx.x + threadIdx.x;\n    int y_idx = blockDim.y * blockIdx.y + threadIdx.y;\n    int idx = numCols * y_idx + x_idx;\n\n    // seperate values into three channels\n    if ((x_idx < numCols) && (y_idx < numRows)) {\n    \tuchar4 pixel = inputImageRGBA[idx];\n    \tredChannel[idx] = pixel.x;\n    \tgreenChannel[idx] = pixel.y;\n    \tblueChannel[idx] = pixel.z;\n    }\n}\n\n//This kernel takes in three color channels and recombines them\n//into one image.  The alpha channel is set to 255 to represent\n//that this image has no transparency.\n__global__\nvoid recombineChannels(const unsigned char* const redChannel,\n                       const unsigned char* const greenChannel,\n                       const unsigned char* const blueChannel,\n                       uchar4* const outputImageRGBA,\n                       int numRows,\n                       int numCols)\n{\n    const int2 thread_2D_pos = make_int2( blockIdx.x * blockDim.x + threadIdx.x,\n\t\t\t\t\t  blockIdx.y * blockDim.y + threadIdx.y);\n\n    const int thread_1D_pos = thread_2D_pos.y * numCols + thread_2D_pos.x;\n\n    //make sure we don't try and access memory outside the image\n    //by having any threads mapped there return early\n    if (thread_2D_pos.x >= numCols || thread_2D_pos.y >= numRows)\n\treturn;\n\n    unsigned char red   = redChannel[thread_1D_pos];\n    unsigned char green = greenChannel[thread_1D_pos];\n    unsigned char blue  = blueChannel[thread_1D_pos];\n\n    //Alpha should be 255 for no transparency\n    uchar4 outputPixel = make_uchar4(red, green, blue, 255);\n\n    outputImageRGBA[thread_1D_pos] = outputPixel;\n}\n\nunsigned char *d_red, *d_green, *d_blue;\nfloat         *d_filter;\n\nvoid allocateMemoryAndCopyToGPU(const size_t numRowsImage, const size_t numColsImage,\n                                const float* const h_filter, const size_t filterWidth)\n{\n    //allocate memory for the three different channels\n    //original\n    checkCudaErrors(cudaMalloc(&d_red,   sizeof(unsigned char) * numRowsImage * numColsImage));\n    checkCudaErrors(cudaMalloc(&d_green, sizeof(unsigned char) * numRowsImage * numColsImage));\n    checkCudaErrors(cudaMalloc(&d_blue,  sizeof(unsigned char) * numRowsImage * numColsImage));\n\n    // allocate memory for filter array\n    checkCudaErrors(cudaMalloc(&d_filter, sizeof(float) * filterWidth * filterWidth));\n\n    //Copy the filter on the host (h_filter) to the memory you just allocated\n    checkCudaErrors(cudaMemcpy(d_filter, h_filter, sizeof(float) * filterWidth * filterWidth, cudaMemcpyHostToDevice));\n}\n\nvoid your_gaussian_blur(const uchar4 * const h_inputImageRGBA, uchar4 * const d_inputImageRGBA,\n                        uchar4* const d_outputImageRGBA, const size_t numRows, const size_t numCols,\n                        unsigned char *d_redBlurred,\n                        unsigned char *d_greenBlurred,\n                        unsigned char *d_blueBlurred,\n                        const int filterWidth)\n{\n    //TODO: Set reasonable block size (i.e., number of threads per block)\n    const int BLOCK_SIZE = 32;\n    const dim3 blockSize(BLOCK_SIZE, BLOCK_SIZE, 1);\n\n    //TODO:\n    //Compute correct grid size (i.e., number of blocks per kernel launch)\n    //from the image size and and block size.\n    const dim3 gridSize(numCols/blockSize.x + 1, numRows/blockSize.y + 1, 1); // extra block for remainders\n\n    //TODO: Launch a kernel for separating the RGBA image into different color channels\n    separateChannels<<<gridSize, blockSize>>>(d_inputImageRGBA, numRows, numCols, d_red, d_green, d_blue);\n\n    // Call cudaDeviceSynchronize(), then call checkCudaErrors() immediately after\n    // launching your kernel to make sure that you didn't make any mistakes.\n    cudaDeviceSynchronize(); checkCudaErrors(cudaGetLastError());\n\n    //TODO: Call your convolution kernel here 3 times, once for each color channel.\n    gaussian_blur<<<gridSize, blockSize>>>(d_red, d_redBlurred, numRows, numCols, d_filter, filterWidth);\n    gaussian_blur<<<gridSize, blockSize>>>(d_green, d_greenBlurred, numRows, numCols, d_filter, filterWidth);\n    gaussian_blur<<<gridSize, blockSize>>>(d_blue, d_blueBlurred, numRows, numCols, d_filter, filterWidth);\n\n    // Again, call cudaDeviceSynchronize(), then call checkCudaErrors() immediately after\n    // launching your kernel to make sure that you didn't make any mistakes.\n    cudaDeviceSynchronize(); checkCudaErrors(cudaGetLastError());\n\n    // Now we recombine your results. We take care of launching this kernel for you.\n    //\n    // NOTE: This kernel launch depends on the gridSize and blockSize variables,\n    // which you must set yourself.\n    recombineChannels<<<gridSize, blockSize>>>(d_redBlurred,\n\t\t\t\t\t       d_greenBlurred,\n\t\t\t\t\t       d_blueBlurred,\n\t\t\t\t\t       d_outputImageRGBA,\n\t\t\t\t\t       numRows,\n\t\t\t\t\t       numCols);\n    cudaDeviceSynchronize(); checkCudaErrors(cudaGetLastError());\n\n}\n\n\n//Free all the memory that we allocated\n//TODO: make sure you free any arrays that you allocated\nvoid cleanup() {\n    checkCudaErrors(cudaFree(d_red));\n    checkCudaErrors(cudaFree(d_green));\n    checkCudaErrors(cudaFree(d_blue));\n    checkCudaErrors(cudaFree(d_filter));\n}\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":45,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/mnt/David/programming/cuda/blur_image/student_func.cu","digestWhenLastPersisted":"a13e1a026cc616449753bf2e22c57fc50ccfb292","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"children":[{"id":3,"items":[{"id":26,"softTabs":true,"displayBuffer":{"id":27,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/mnt/David/programming/cuda/red_eye/student_func.cu","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/mnt/David/programming/cuda/red_eye/student_func.cu","focused":true,"flexScale":0.7741559953434226,"deserializer":"Pane"},{"id":39,"items":[{"id":36,"softTabs":true,"displayBuffer":{"id":35,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/mnt/David/programming/cuda/red_eye/student_func.cu","tabLength":4,"largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":45,"softTabs":true,"displayBuffer":{"id":46,"softWrapped":false,"scrollTop":1608,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/mnt/David/programming/cuda/blur_image/student_func.cu","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/mnt/David/programming/cuda/blur_image/student_func.cu","focused":false,"flexScale":1.2258440046565775,"deserializer":"Pane"}],"orientation":"horizontal","flexScale":1,"deserializer":"PaneAxis"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-c","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/mnt/David/programming/cuda/red_eye/student_func.cu":1446170312312,"/mnt/David/programming/cuda/blur_image/student_func.cu":1446172332870},"metrics":{"sessionLength":2708230},"tabs":[{},{}],"tree-view":{"directoryExpansionStates":{"/home/david/programming/cuda/red_eye":{"isExpanded":false,"entries":{}},"/home/david/programming/cuda/blur_image":{"isExpanded":true,"entries":{}}},"selectedPath":"/home/david/programming/cuda/red_eye","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}