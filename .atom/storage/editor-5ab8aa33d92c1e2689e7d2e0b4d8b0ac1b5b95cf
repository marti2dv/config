{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":69,"width":1920,"height":1011,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/home/david/Desktop/parallel"],"buffers":[{"text":"CS6068 Fall 2015 Midterm Practice Exam \r\nThe midterm will be held on October 26 in class.\r\n\r\n1.What are three traditional ways that hardware designers make computers run faster? Please circle all that are true.\r\n-faster clocks\r\n-longer clock periods\r\n-more work per clock cycle\r\n-a larger hard disk\r\n-adding more processors \r\n-reducing the amount of memory\n\nans: 1,3,5\r\n\r\n2.What are David Patterson�s Three Walls of Computer Architecture?\nans: Power, Memory, ILP\r\n\r\n3. For a class of GPUs, what is appropiate measure to compare power consumption of different devices?\r\nans:Flops per watt\n\r\n4.What techniques are computer designers today using to build more power-efficient devices? Please circle all that are true.\r\n-having fewer, but more complex processors,\r\n-having more, but less complex processors,\r\n-maximizing the speed of the processor clock \r\n-increasing the complexity of the control hardware\n\nans:2\r\n\r\n5. Name four common patterns of parallel computation? For each pattern, discuss whether the many-core or multi-core architecture model is more appropriate.\r\n\nans: \nMap redude: manycore\nPipe-and-filter: multi\nAgents: multi\niterative: many\n\r\n6. What is concurrency control, and discuss what is the difference between pessimistic an optimistic concurrency control?\n\nans: addresses conflict in simult access, pessimistic locks, optimistic transactions STM\n\r\n\r\n7. How does Fork/Join parallelism differ from Kernel data-parallelism?\n\nans: in F/J main thread spawns to complete complex parallel tasks then joins mains, kernels uses large index sets and map simple tasks to threads \r\n\r\n8. Circle all the true statements.\r\n-A thread block contains many threads.\r\n-An SM might run more than one thread block.\r\n-A thread block may run on more than one SM.\r\n-All the threads in a thread block might cooperate to solve a subproblem. \r\n-All the threads that run on a given SM may cooperate to solve a subproblem.\n\nans:1,2,4\r\n\r\n9. If we have a single kernel that is launched on many thread blocks, including block x and block y, the programmer can do which of the following: Circle all the true statements.\r\n-specify that block x will run at the same time as block y\r\n-specify that block x will run after block y.\r\n-specify that block x will run on same SM as y \r\n-none of the above\n\nans: none\r\n\r\n10. Circle all the statements that are true.\r\n-All threads from a block can access the same variable in that block's shared memory. \r\n-Threads from two different blocks can access the same variable in global memory \r\n-Threads from different blocks have their own copy of local variables in local memory. \r\n-Threads from the same block have their own copy of local variables in local memory.\n\nans:1,2,3,4\r\n\r\n11. At what level can barrier synchronizations be executed in CUDA: \r\n-thread  -block  -grid   -device  -multi-device?\r\n\nans: block\r\n\r\n12. What is a parallel map operation? Circle all problems that can be solved using map.\r\n-sort an array -add one to each element of an array -sum elements in array -move data based on array of scatter addresses\n\nans: 2,4\r\n\r\n13. Circle which operators are both binary and associative and therefore can be used in a reduction or scan. \r\n-multiply -minimum -factorial -exclusive or -bitwise and -exponentiation -integer division\n\nans: 1,2,4,5\r\n\r\n14. Using 1D global indexing, how would you specify the parallel execution mapping the ith thread to the task of reading and then squaring the ith item from an large array X in global memory.\r\n\nint i = blockIdx.x * blockDim.x + threadIdx.x;\nfloat x = X[i]\nX[i] = x * x;\n\n\r\n15.Circle all statements that are true. When running reduction code running on an input of size n?\r\n-it takes at least n operations\r\n-its work complexity is order of n\r\n-its work complexity is order n*n\r\n-its step-complexity is order of 1, independent of the size of the input.\n\nans: 2\r\n\r\n16. Circle the correct answer. The number of steps in a reduction as a function of n is: \r\n- square root of n\r\n- log base 2 of n\r\n- n\r\n- n times log base 2 of n\nans: 2\n\r\n\r\n17. Circle all that are true\r\n- map operations have arguments that are functions with a single argument \r\n- map operations can be applied to arrays of any number of dimensions\r\n- map operations are generally very efficient on GPUs\r\n- a compact operation requires a map operation to be performed.\n\nans:1,2,3,4\r\n\r\n18. What is the impact of granularity on performance when considering the latency of global memory communication? What is the granularity of dot product of two vectors that reside in global memory?\r\n\nAns: The higher the granularity (computation to communication ratio) the greater the opportunities for latency hiding. The dot product has 1:1 computation to communication ratio.\r\n\r\n19. What is the output of a max scan operation on the list of unsigned ints [5 4 7 3 1 8 2 6]? \r\nProvide a solution to both inclusive and exclusive scans.\n\ninc-scan\n5 5 7 7 7 8 8 8\nexc-scan\n0 5 5 7 7 7 8 8\n\r\n\r\n20. Compute the max (inclusive) scan of this input sequence 2 1 4 3 showing all work when using\r\na) the Hillis-Steele algorithm\r\nb) the Blelloch algorithm\r\n\r\n21. Explain which scan algorithm (Hillis-Steele or Blelloch algorithm) is best suited and why?\r\nYou are scanning a 512 element vector and a GPU that has 512 processors.\n\nans: Hillis-Steele would probably perform better, since its step complexity is half that of Blelloch.\r\n\r\n22. Explain which scan (Hillis-Steele or Blelloch algorithm) is best suited and why? \r\nYou are scanning a 1 million element input vector in 512 processors machine.\r\n\nans: Hillis-Steele would probably perform worse, since its work complexity is logn times that of Blelloch.\r\n\r\n23. Suppose you are computing a histogram with less than 10 bins. Discuss an efficient GPU solution. Indicate whether or not you need to use atomics to manage access to bins of the histogram.\n\nans: atomics would limit the parallelism to speedup of 10 = #bins. Using per thread private bin counts, followed by a reduction would be efficient.\r\n\r\n24. True or false - In a scatter operation a syncthreads command is needed to overcome write conflicts.\n\nans: False\r\n\r\n25. Is the compact parallel operation going to be most useful in scenarios where we delete a (small number) or a (large number) of elements?\r\n\nans:large\n\r\n26. Is the compact parallel operation going to be most useful in scenarios where we need to run (cheap) or (expensive) function on filtered elements.\n\nans: expensive\r\n\r\n27. Suppose we are running compact operations on a list of numbers with range from 1 to 1 million. Compact operation A, filters elements that are divisible by 17, and thus is only going to keep a very few of the input items. Compact operation B filters elements not divisible by 31, and thus is going to keep most of the input items. For each of the three phases of compact: predicate map, scan, and scatter phases of the compact operation, will A run faster, B run faster or will they take the same amount of time?\r\na. Predicate map  b. Scan  c. Scatter\r\n\nans:\na. same   b. same  c. A faster\n\r\n28. What is the difference between latency and bandwidth? Which is more easily enhanced by advanced architectures? Given a sports-car traveling 100mph with 2 passengers versus a bus traveling 50mph with 20 people. Say the task is to tranport people 200 miles. How do the Bandwidths(in people deliverd per hour) and Latency (in hours) compare between the two vehicles?\n\nans: Sport-car latency: 2 hrs, bw: 1/hr; bus latency: 4 hrs, bw: 5/hr\r\n\r\n29. How is Occupancy defined in Cuda, and why does it have an impact on performance?\r\n\nans: percent of active thread by total threads. High occupancy increases potential bandwidth hiding latency.\n\r\n30. Show the contents of the CSR (Compressed Sparse Row) format for the following 5x5 matrix:\r\n02300\r\n10050\r\n00400 \r\n00020\r\n\r\n31. Consider the sparse matrix dense vector product problem, and the two different parallel methods tpr(thread per row) or tpe (thread per element).\r\na. Which approach will launch more threads?\r\nb. Which approach will require more communication between threads?\r\nc. Which approach will do more work per thread? \r\nd. Which approach is more load balanced?\r\n\nans:\na. tpe\nb. tpe\nc. tpr\nd. tpe\n\r\n32. What is the list ranking problem for linked lists, and write a parallel algorithm for solving it where the linked list is given as an array of pointers.\r\n\nans: finding distance to head node.\n\r\n33. What does it mean for a sorting algorithm to be oblivious. State the 0/1 sorting lemma for oblivious sorting algorithms.\r\n\nans: oblivious means algorithm control not dependent on data. \n\r\n34. Provide the logic of BitonicSort � and pseudocode is sufficient here. What is the step and the work complexity of BitonicSort?\r\n\r\n35. In the BitonicSort figure presented in lecture identify each of the bitonic comparison and swap modules. \r\n\r\n36. Prove that BitonicSort is correct using the 0/1 sorting lemma.\r\n\r\n37. What is the work and step complexity of countingSort?\r\n\r\n38. What is the expected work when hashing using chaining when the hash is to a chain of length k.\r\n\r\n39. True or false: Bloom filters are a data structure that allows fast set membership operations, but with low probability of false negatives.\r\n\r\n40. List the following in the order of their work complexity from least to most. a. parallel compact b. parallel scan c. sieveEratosthenes d. dense n-body\r\ne. bitonicSort f. BFS g. sequential mergeSort\r\n\r\n41. List the following in the order of their step complexity from least to most. a. parallel compact b. parallel scan c. sieveEratosthenes d. dense n-body\r\ne. bitonicSort f. BFS g. sequential mergeSort\r\n\r\n42. Write a CUDA kernel function that will effectively parallelize the following sequential function.\r\nvoid serial (int n, float a, float * x, float * y) {\r\nfor int i = 0; i < n; ++i) {\r\ny[i]= a* x[i] + y[i]; } }\r\n\r\n43. What does the following kernel code do? Where is its race condition problem? How do you overcome it?\r\n__global__ void naive(int *d_bins, const int *d_in, const int BIN_COUNT)\r\n{\r\n    int myId = threadIdx.x + blockDim.x * blockIdx.x;\r\n    int myItem = d_in[myId];\r\n    int myBin = myItem % BIN_COUNT;\r\n    d_bins[myBin]++;\r\n}\r\n\r\n\r\n44. Complete the CUDA kernel function that computes, per-block, the sum of a block-sized portion of the input using a block-wide reduction.\r\nYou should assume 1-dimensional thread and block indexing. \r\n__global__ void block_sum(const float *input,\r\n                          float *per_block_results,\r\n                          const size_t n)\r\n{\r\n  extern __shared__ float sdata[];\r\n   // TODO: load input into __shared__ memory \r\n   // TODO: use contiguous range pattern for reduction\r\n   \r\n\r\n  // thread 0 writes the final result\r\n  if(threadIdx.x == 0)\r\n  {    per_block_results[blockIdx.x] = sdata[0]; }\r\n}\r\n","markerStore":{"nextMarkerId":281,"markersById":{"0":{"range":{"start":{"row":210,"column":2},"end":{"row":210,"column":2}},"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":6,"undoStack":[{"type":"checkpoint","id":1,"snapshot":{"0":{"range":[[190,0],[190,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false}],"redoStack":[{"type":"group-end","snapshot":{"0":{"range":[[190,4],[190,4]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[190,3],[190,3]],"newRange":[[190,3],[190,4]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[190,2],[190,2]],"newRange":[[190,2],[190,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[190,1],[190,1]],"newRange":[[190,1],[190,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[190,0],[190,0]],"newRange":[[190,0],[190,1]],"oldText":"","newText":"*"}},{"type":"group-start","snapshot":{"0":{"range":[[190,0],[190,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}]},"encoding":"utf8","filePath":"/mnt/David/Documents/fs15/parallel/cs6068-2015-Midterm1-answers.txt","digestWhenLastPersisted":"439f45e55f94389c63bc8e35d759a6c19d731ffb","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"CS6068 Fall 2015 Midterm Practice Exam\r\nThe midterm will be held on October 21 in class.\r\n\r\n1.What are three traditional ways that hardware designers make computers run faster? Please circle all that are true.\r\n-faster clocks\r\n-longer clock periods\r\n-more work per clock cycle\r\n-a larger hard disk\r\n-adding more processors\r\n-reducing the amount of memory\r\n\r\n2.What are David Patterson�s Three Walls of Computer Architecture?\r\n\r\n*** 3. For a class of GPUs, what is appropiate measure to compare power consumption of different devices?\r\n\r\n4.What techniques are computer designers today using to build more power-efficient devices? Please circle all that are true.\r\n-having fewer, but more complex processors,\r\n-having more, but less complex processors,\r\n-maximizing the speed of the processor clock\r\n-increasing the complexity of the control hardware\r\n\r\n*** 5. Name four common patterns of parallel computation? For each pattern, discuss whether the many-core or multi-core architecture model is more appropriate.\r\n\r\n6. What is concurrency control, and discuss what is the difference between pessimistic an optimistic concurrency control?\r\n\r\n*** 7. How does Fork/Join parallelism differ from Kernel data-parallelism?\r\n\r\n8. Circle all the true statements.\r\n-A thread block contains many threads.\r\n-An SM might run more than one thread block.\r\n-A thread block may run on more than one SM.\r\n-All the threads in a thread block might cooperate to solve a subproblem.\r\n-All the threads that run on a given SM may cooperate to solve a subproblem.\r\n\r\n9. If we have a single kernel that is launched on many thread blocks, including block x and block y, the programmer can do which of the following: Circle all the true statements.\r\n-specify that block x will run at the same time as block y\r\n-specify that block x will run after block y.\r\n-specify that block x will run on same SM as y\r\n-none of the above\r\n\r\n10. Circle all the statements that are true.\r\n-All threads from a block can access the same variable in that block's shared memory.\r\n-Threads from two different blocks can access the same variable in global memory\r\n-Threads from different blocks have their own copy of local variables in local memory.\r\n-Threads from the same block have their own copy of local variables in local memory.\r\n\r\n11. At what level can barrier synchronizations be executed in CUDA:\r\n-thread  -block  -grid   -device  -multi-device?\r\n\r\n\r\n12. What is a parallel map operation? Circle all problems that can be solved using map.\r\n-sort an array -add one to each element of an array -sum elements in array -move data based on array of scatter addresses\r\n\r\n13. Circle which operators are both binary and associative and therefore can be used in a reduction or scan.\r\n-multiply -minimum -factorial -exclusive or -bitwise and -exponentiation -integer division\r\n\r\n14. Using 1D global indexing, how would you specify the parallel execution mapping the ith thread to the task of reading and then squaring the ith item from an large array X in global memory.\r\n\r\n\r\n15.Circle all statements that are true. When running reduction code running on an input of size n?\r\n-it takes at least n operations\r\n-its work complexity is order of n\r\n-its work complexity is order n*n\r\n-its step-complexity is order of 1, independent of the size of the input.\r\n\r\n16. Circle the correct answer. The number of steps in a reduction as a function of n is:\r\n- square root of n\r\n- log base 2 of n\r\n- n\r\n- n times log base 2 of n\r\n\r\n17. Circle all that are true\r\n- map operations have arguments that are functions with a single argument\r\n- map operations can be applied to arrays of any number of dimensions\r\n- map operations are generally very efficient on GPUs\r\n- a compact operation requires a map operation to be performed.\r\n\r\n*** 18. What is the impact of granularity on performance when considering the latency of global memory communication? What is the granularity of dot product of two vectors that reside in global memory?\r\n\r\n\r\n19. What is the output of a max scan operation on the list of unsigned ints [5 4 7 3 1 8 2 6]?\r\nProvide a solution to both inclusive and exclusive scans.\r\n\r\n*** 20. Compute the max (inclusive) scan of this input sequence 2 1 4 3 showing all work when using\r\na) the Hillis-Steele algorithm\r\nb) the Blelloch algorithm\r\n\r\n*** 21. Explain which scan algorithm (Hillis-Steele or Blelloch algorithm) is best suited and why?\r\nYou are scanning a 512 element vector and a GPU that has 512 processors.\r\n\r\n*** 22. Explain which scan (Hillis-Steele or Blelloch algorithm) is best suited and why?\r\nYou are scanning a 1 million element input vector in 512 processors machine.\r\n\r\n23. Suppose you are computing a histogram with less than 10 bins. Discuss an efficient GPU solution. Indicate whether or not you need to use atomics to manage access to bins of the histograms.\r\n\r\n24. True or false - In a scatter operation a syncthreads command is needed to overcome write conflicts.\r\n\r\n25. Is the compact parallel operation going to be most useful in scenarios where we delete a (small number) or a (large number) of elements?\r\n\r\n26. Is the compact parallel operation going to be most useful in scenarios where we need to run (cheap) or (expensive) function on filtered elements.\r\n\r\n*** 27. Suppose we are running compact operations on a list of numbers with range from 1 to 1 million. Compact operation A, filters elements that are divisible by 17, and thus is only going to keep a very few of the input items. Compact operation B filters elements not divisible by 31, and thus is going to keep most of the input items. For each of the three phases of compact: predicate map, scan, and scatter phases of the compact operation, will A run faster, B run faster or will they take the same amount of time?\r\na. Predicate map b. Scan  c. Scatter\r\n\r\n28. What is the difference between latency and bandwidth? Which is more easily enhanced by advanced architectures? Given a sports-car traveling 100mph with 2 passengers versus a bus traveling 50mph with 20 people. Say the task is to tranport people 200 miles. How do the Bandwidths(in people deliverd per hour) and Latency (in hours) compare between the two vehicles?\r\n\r\n29. How is Occupancy defined in Cuda, and why does it have an impact on performance?\r\n\r\n*** 30. Show the contents of the CSR (Compressed Sparse Row) format for the following 5x5 matrix:\r\n02300\r\n10050\r\n00400\r\n00020\r\n\r\n31. Consider the sparse matrix dense vector product problem, and the two different parallel methods tpr(thread per row) or tpe (thread per element).\r\na. Which approach will launch more threads?\r\nb. Which approach will require more communication between threads?\r\nc. Which approach will do more work per thread?\r\nd. Which approach is more load balanced?\r\n\r\n/***\r\n32. What is the list ranking problem for linked lists, and write a parallel algorithm for solving it where the linked list is given as an array of pointers.\r\n\r\n33. What does it mean for a sorting algorithm to be oblivious. State the 0/1 sorting lemma for oblivious sorting algorithms.\r\n\r\n34. Provide the logic of BitonicSort – pseudocode is sufficient here. What is the step and the work complexity of BitonicSort?\r\n\r\n35. In the BitonicSort figure presented in lecture identify each of the 'bitonic comparison and swap'� modules.\r\n\r\n36. Prove that BitonicSort is correct using the 0/1 sorting lemma.\r\n\r\n37. What is the work and step complexity of countingSort?\r\n\r\n38. What is the expected work when hashing using chaining when the hash is to a chain of length k.\r\n\r\n39. True or false: Bloom filters are a data structure that allows fast set membership operations, but with low probability of false negatives.\r\n\r\n40. List the following in the order of their work complexity from least to most. a. parallel compact b. parallel scan c. sieveEratosthenes d. dense n-body\r\ne. bitonicSort f. BFS g. sequential mergeSort\r\n\r\n41. List the following in the order of their step complexity from least to most. a. parallel compact b. parallel scan c. sieveEratosthenes d. dense n-body\r\ne. bitonicSort f. BFS g. sequential mergeSort\r\n\r\n42. Write a CUDA kernel function that will effectively parallelize the following sequential function.\r\nvoid serial (int n, float a, float * x, float * y) {\r\nfor int i = 0; i < n; ++i) {\r\ny[i]= a* x[i] + y[i]; } }\r\n\r\n43. What does the following kernel code do? Where is its race condition problem? How do you overcome it?\r\n__global__ void naive(int *d_bins, const int *d_in, const int BIN_COUNT)\r\n{\r\n    int myId = threadIdx.x + blockDim.x * blockIdx.x;\r\n    int myItem = d_in[myId];\r\n    int myBin = myItem % BIN_COUNT;\r\n    d_bins[myBin]++;\r\n}\r\n\r\n\r\n*** 44. Complete the CUDA kernel function that computes, per-block, the sum of a block-sized portion of the input using a block-wide reduction.\r\nYou should assume 1-dimensional thread and block indexing.\r\n__global__ void block_sum(const float *input,\r\n                          float *per_block_results,\r\n                          const size_t n)\r\n{\r\n  extern __shared__ float sdata[];\r\n   // TODO: load input into __shared__ memory\r\n   // TODO: use contiguous range pattern for reduction\r\n\r\n\r\n  // thread 0 writes the final result\r\n  if(threadIdx.x == 0)\r\n  {    per_block_results[blockIdx.x] = sdata[0]; }\r\n}\r\n***/\r\n","markerStore":{"nextMarkerId":1785,"markersById":{"0":{"range":{"start":{"row":164,"column":2},"end":{"row":164,"column":2}},"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":114,"undoStack":[{"type":"checkpoint","id":1,"snapshot":{"0":{"range":[[83,0],[83,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[83,0],[83,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[83,0],[83,0]],"newRange":[[83,0],[83,1]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[83,1],[83,1]],"newRange":[[83,1],[83,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[83,2],[83,2]],"newRange":[[83,2],[83,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[83,3],[83,3]],"newRange":[[83,3],[83,4]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"0":{"range":[[83,4],[83,4]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":6,"snapshot":{"0":{"range":[[13,0],[13,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[13,0],[13,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[13,0],[13,0]],"newRange":[[13,0],[13,1]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[13,1],[13,1]],"newRange":[[13,1],[13,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[13,2],[13,2]],"newRange":[[13,2],[13,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[13,3],[13,3]],"newRange":[[13,3],[13,4]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"0":{"range":[[13,4],[13,4]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":11,"snapshot":{"0":{"range":[[21,0],[21,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"checkpoint","id":16,"snapshot":{"0":{"range":[[21,0],[21,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[21,0],[21,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[21,0],[21,0]],"newRange":[[21,0],[21,1]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[21,1],[21,1]],"newRange":[[21,1],[21,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[21,2],[21,2]],"newRange":[[21,2],[21,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[21,3],[21,3]],"newRange":[[21,3],[21,4]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"0":{"range":[[21,4],[21,4]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":21,"snapshot":{"0":{"range":[[25,0],[25,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[25,0],[25,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[25,0],[25,0]],"newRange":[[25,0],[25,1]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[25,1],[25,1]],"newRange":[[25,1],[25,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[25,2],[25,2]],"newRange":[[25,2],[25,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[25,3],[25,3]],"newRange":[[25,3],[25,4]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"0":{"range":[[25,4],[25,4]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":26,"snapshot":{"0":{"range":[[77,0],[77,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[77,0],[77,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[77,0],[77,0]],"newRange":[[77,0],[77,1]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[77,1],[77,1]],"newRange":[[77,1],[77,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[77,2],[77,2]],"newRange":[[77,2],[77,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[77,3],[77,3]],"newRange":[[77,3],[77,4]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"0":{"range":[[77,4],[77,4]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[96,0],[96,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[166,0],[166,3]],"newRange":[[166,0],[166,0]],"oldText":"   ","newText":""}},{"type":"change","content":{"oldRange":[[164,45],[164,46]],"newRange":[[164,45],[164,45]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[158,58],[158,59]],"newRange":[[158,58],[158,58]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[126,111],[126,112]],"newRange":[[126,111],[126,111]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[117,47],[117,48]],"newRange":[[117,47],[117,47]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[111,5],[111,6]],"newRange":[[111,5],[111,5]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[90,84],[90,85]],"newRange":[[90,84],[90,84]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[80,94],[80,95]],"newRange":[[80,94],[80,94]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[72,73],[72,74]],"newRange":[[72,73],[72,73]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[65,88],[65,89]],"newRange":[[65,88],[65,88]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[53,108],[53,109]],"newRange":[[53,108],[53,108]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[46,67],[46,68]],"newRange":[[46,67],[46,67]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[43,86],[43,87]],"newRange":[[43,86],[43,86]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[42,80],[42,81]],"newRange":[[42,80],[42,80]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[41,85],[41,86]],"newRange":[[41,85],[41,85]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[37,46],[37,47]],"newRange":[[37,46],[37,46]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[31,73],[31,74]],"newRange":[[31,73],[31,73]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[18,44],[18,45]],"newRange":[[18,44],[18,44]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[8,23],[8,24]],"newRange":[[8,23],[8,23]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[0,38],[0,39]],"newRange":[[0,38],[0,38]],"oldText":" ","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[96,0],[96,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":32,"snapshot":{"0":{"range":[[87,0],[87,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[87,0],[87,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[87,0],[87,0]],"newRange":[[87,0],[87,1]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[87,1],[87,1]],"newRange":[[87,1],[87,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[87,2],[87,2]],"newRange":[[87,2],[87,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[87,3],[87,3]],"newRange":[[87,3],[87,4]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[90,0],[90,0]],"newRange":[[90,0],[90,1]],"oldText":"","newText":"8"}},{"type":"change","content":{"oldRange":[[90,1],[90,1]],"newRange":[[90,1],[90,2]],"oldText":"","newText":"8"}},{"type":"change","content":{"oldRange":[[90,2],[90,2]],"newRange":[[90,2],[90,3]],"oldText":"","newText":"8"}},{"type":"change","content":{"oldRange":[[90,3],[90,3]],"newRange":[[90,3],[90,4]],"oldText":"","newText":" "}},{"type":"change","content":{"oldRange":[[90,3],[90,4]],"newRange":[[90,3],[90,3]],"oldText":" ","newText":""}},{"type":"change","content":{"oldRange":[[90,2],[90,3]],"newRange":[[90,2],[90,2]],"oldText":"8","newText":""}},{"type":"change","content":{"oldRange":[[90,1],[90,2]],"newRange":[[90,1],[90,1]],"oldText":"8","newText":""}},{"type":"change","content":{"oldRange":[[90,0],[90,1]],"newRange":[[90,0],[90,0]],"oldText":"8","newText":""}},{"type":"change","content":{"oldRange":[[90,0],[90,0]],"newRange":[[90,0],[90,1]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[90,1],[90,1]],"newRange":[[90,1],[90,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[90,2],[90,2]],"newRange":[[90,2],[90,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[90,3],[90,3]],"newRange":[[90,3],[90,4]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"0":{"range":[[90,4],[90,4]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":54,"snapshot":{"0":{"range":[[101,0],[101,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[101,0],[101,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[101,0],[101,0]],"newRange":[[101,0],[101,1]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[101,1],[101,1]],"newRange":[[101,1],[101,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[101,2],[101,2]],"newRange":[[101,2],[101,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[101,3],[101,3]],"newRange":[[101,3],[101,4]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"0":{"range":[[101,4],[101,4]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":60,"snapshot":{"0":{"range":[[108,0],[108,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[108,0],[108,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[108,0],[108,0]],"newRange":[[108,0],[108,1]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[108,1],[108,1]],"newRange":[[108,1],[108,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[108,2],[108,2]],"newRange":[[108,2],[108,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[108,3],[108,3]],"newRange":[[108,3],[108,4]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"0":{"range":[[108,4],[108,4]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":66,"snapshot":{"0":{"range":[[120,0],[120,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"checkpoint","id":95,"snapshot":{"0":{"range":[[119,0],[119,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[119,0],[119,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[119,0],[119,0]],"newRange":[[119,0],[120,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[120,0],[120,0]],"newRange":[[120,0],[120,0]],"oldText":"","newText":""}},{"type":"change","content":{"oldRange":[[119,0],[119,0]],"newRange":[[119,0],[119,0]],"oldText":"","newText":""}},{"type":"change","content":{"oldRange":[[120,0],[120,0]],"newRange":[[120,0],[120,1]],"oldText":"","newText":"/"}},{"type":"change","content":{"oldRange":[[120,1],[120,1]],"newRange":[[120,1],[120,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[120,2],[120,2]],"newRange":[[120,2],[120,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[120,3],[120,3]],"newRange":[[120,3],[120,4]],"oldText":"","newText":"*"}},{"type":"group-end","snapshot":{"0":{"range":[[120,4],[120,4]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":102,"snapshot":{"0":{"range":[[173,0],[173,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[173,0],[173,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[173,0],[173,0]],"newRange":[[173,0],[173,1]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[173,1],[173,1]],"newRange":[[173,1],[173,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[173,2],[173,2]],"newRange":[[173,2],[173,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[173,3],[173,3]],"newRange":[[173,3],[173,4]],"oldText":"","newText":"/"}},{"type":"group-end","snapshot":{"0":{"range":[[173,4],[173,4]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[173,3],[173,3]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[173,4],[173,4]],"newRange":[[173,4],[174,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"0":{"range":[[173,3],[173,3]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"checkpoint","id":108,"snapshot":{"0":{"range":[[158,0],[158,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"isBoundary":false},{"type":"group-start","snapshot":{"0":{"range":[[158,0],[158,0]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[158,0],[158,0]],"newRange":[[158,0],[158,1]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[158,1],[158,1]],"newRange":[[158,1],[158,2]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[158,2],[158,2]],"newRange":[[158,2],[158,3]],"oldText":"","newText":"*"}},{"type":"change","content":{"oldRange":[[158,3],[158,3]],"newRange":[[158,3],[158,4]],"oldText":"","newText":" "}},{"type":"group-end","snapshot":{"0":{"range":[[158,4],[158,4]],"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/mnt/David/Documents/fs15/parallel/cs6068-2015-MidtermI-PracExam.txt","digestWhenLastPersisted":"5c67f489a6b8f23cf124223de468a2fffcbcf6c0","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":8,"softTabs":true,"displayBuffer":{"id":9,"softWrapped":false,"scrollTop":3037,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/mnt/David/Documents/fs15/parallel/cs6068-2015-Midterm1-answers.txt","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrapped":false,"scrollTop":1904,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/mnt/David/Documents/fs15/parallel/cs6068-2015-MidtermI-PracExam.txt","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/mnt/David/Documents/fs15/parallel/cs6068-2015-MidtermI-PracExam.txt","focused":false,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-text","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/mnt/David/Documents/fs15/parallel/cs6068-2015-Midterm1-answers.txt":1445874336909,"/mnt/David/Documents/fs15/parallel/cs6068-2015-MidtermI-PracExam.txt":1445874342397},"metrics":{"sessionLength":4664486},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/home/david/Desktop/parallel":{"isExpanded":true,"entries":{"textbooks":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/home/david/Desktop/parallel/cs6068-2015-MidtermI-PracExam.txt","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}